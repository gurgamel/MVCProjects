@model IEnumerable<string>

<!--Create a "Home" link which calls the List method on the ProductController-->
@Html.ActionLink("Home", "List", "Product", null, new { @class = "btn btn-block btn-default btn-lg" })

<!--The incoming model is a list of strings generated by the Menu method on the NavController.
    This is a distinct list of product categories.-->
@foreach(var link in Model)
{
    <!--Each link gets created as a large button because of the CSS class.
        RouteLink is similar to ActionLink, but it lets us define a set of name/value pairs
        which are used when generating the Url from the routing config.
        This only works because the text of the link is exactly the same as category names.
        
        The ViewBag bit in the CSS class gets the currently selected cat from the ViewBag,
        and changes the css to btn-primary if the link name matches the select cat.
        The selected cat was put in the ViewBag by the Menu method on the NavController.
        -->
    @Html.RouteLink(link, new
    {
        controller = "Product",
        action = "List",
        category = link,
        page = 1
    }, new {@class = "btn btn-block btn-default btn-lg"
        + (link == ViewBag.SelectedCategory ? " btn-primary" : "")
    })
}